{
    "consoleLog": {
        "prefix": "clg",
        "body": [
            "console.log($0)"
        ],
        "description": "Log output to console"
    },
    "consoleError": {
        "prefix": "cle",
        "body": [
            "console.error($0)"
        ],
        "description": "Log error to console"
    },
    "require": {
        "prefix": "rq",
        "body": "const ${1} = require('${1}')$0",
        "description": "require statement"
    },
    "import": {
        "prefix": "imp",
        "body": "import ${2} from '${1}'$0",
        "description": "import statement"
    },
    "typeof": {
        "prefix": "tpf",
        "body": [
            "typeof ${0}"
        ],
        "description": "type of variable"
    },
    "namedFunction": {
        "prefix": "nfn",
        "body": [
            "const ${1:name} = (${2:params}) => {",
            "\t${3}",
            "}"
        ],
        "description": "Creates a named function"
    },
    "anonymousFunction": {
        "prefix": "afn",
        "body": [
            "(${1:params}) => {",
            "\t${2}",
            "}"
        ],
        "description": "Creates an anonymous function"
    },
    "forEach": {
        "prefix": "fre",
        "body": [
            "${1:array}.forEach(${2:item} => {",
            "\t${0}",
            "})"
        ],
        "description": "Creates a forEach statement"
    },
    "expressApp": {
        "prefix": "expapp",
        "body": [
            "const express = require('express')",
            "",
            "const app = express()",
            "",
            "$0",
            "",
            "app.listen(process.env.PORT || 5000, console.log(",
            "\t`${process.env.NODE_ENV === 'production' ? 'Production' : 'Development'} Server started on port ${process.env.PORT || 5000}...`",
            "))"
        ],
        "description": "Creates an express app"
    },
    "expressApi": {
        "prefix": "expapi",
        "body": [
            "const express = require('express')",
            "const cors = require('cors')",
            "",
            "const app = express()",
            "",
            "app.use(cors())",
            "app.use(express.json())",
            "",
            "$0",
            "",
            "app.listen(process.env.PORT || 5000, console.log(",
            "\t`${process.env.NODE_ENV === 'production' ? 'Production' : 'Development'} Server started on port ${process.env.PORT || 5000}...`",
            "))"
        ],
        "description": "Creates an express api server with cors"
    },
    "expressRouter": {
        "prefix": "expr",
        "body": [
            "const { Router } = require('express')",
            "",
            "const router = Router()",
            "",
            "router.$0",
            "",
            "module.exports = router"
        ],
        "description": "Creates an express router"
    },
    "expressRouterFull": {
        "prefix": "exprf",
        "body": [
            "const { Router } = require('express')",
            "",
            "const router = Router()",
            "",
            "router.get('/', (req, res) => {",
            "",
            "})",
            "",
            "router.get('/:id', (req, res) => {",
            "",
            "})",
            "",
            "router.post('/', (req, res) => {",
            "",
            "})",
            "",
            "router.put('/:id', (req, res) => {",
            "",
            "})",
            "",
            "router.patch('/:id', (req, res) => {",
            "",
            "})",
            "",
            "router.delete('/:id', (req, res) => {",
            "",
            "})",
            "",
            "module.exports = router"
        ],
        "description": "Creates a full express router"
    },
    "expressRouterFullAsync": {
        "prefix": "exprfa",
        "body": [
            "const { Router } = require('express')",
            "",
            "const router = Router()",
            "",
            "router.get('/', async (req, res) => {",
            "",
            "})",
            "",
            "router.get('/:id', async (req, res) => {",
            "",
            "})",
            "",
            "router.post('/', async (req, res) => {",
            "",
            "})",
            "",
            "router.put('/:id', async (req, res) => {",
            "",
            "})",
            "",
            "router.patch('/:id', async (req, res) => {",
            "",
            "})",
            "",
            "router.delete('/:id', async (req, res) => {",
            "",
            "})",
            "",
            "module.exports = router"
        ],
        "description": "Creates a full express router with async callbacks"
    },
    "mongooseConnection": {
        "prefix": "mc",
        "body": [
            "const mongoose = require('mongoose')",
            "",
            "mongoose",
            "\t.connect(process.env.MONGODB_URL || 'mongodb://localhost:27017', {",
            "\t\tuseNewUrlParser: true,",
            "\t\tuseUnifiedTopology: true,",
            "\t\tuseCreateIndex: true",
            "\t})",
            "\t.then(() => console.log('Connected to MongoDB...'))",
            "\t.catch(err => {",
            "\t\tconsole.log(err)",
            "\t\tprocess.exit(1)",
            "\t})",
            "",
            "module.exports = mongoose.connection"
        ],
        "description": "Creates a Mongoose Connection"
    },
    "mongooseModel": {
        "prefix": "mm",
        "body": [
            "const mongoose = require('mongoose')",
            "",
            "const $1Schema = new mongoose.Schema({",
            "\t$0",
            "}, {",
            "\ttimestamps: true",
            "})",
            "",
            "module.exports = mongoose.model('$1', $1Schema)"
        ],
        "description": "Creates a Mongoose Model"
    },
    "reactFunctionalComponent": {
        "prefix": "rfc",
        "body": [
            "import React from 'react'",
            "",
            "const $TM_FILENAME_BASE = () => {",
            "\treturn (",
            "\t\t<>",
            "\t\t\t$0",
            "\t\t</>",
            "\t)",
            "}",
            "",
            "export default $TM_FILENAME_BASE"
        ],
        "description": "Creates a React Functional Component"
    },
    "reactFunctionalComponentProps": {
        "prefix": "rfcp",
        "body": [
            "import React from 'react'",
            "",
            "const $TM_FILENAME_BASE = props => {",
            "\treturn (",
            "\t\t<>",
            "\t\t\t$0",
            "\t\t</>",
            "\t)",
            "}",
            "",
            "export default $TM_FILENAME_BASE"
        ],
        "description": "Creates a React Functional Component with props"
    },
    "createContext": {
        "prefix": "rcontext",
        "body": [
            "import React from 'react'",
            "",
            "export default React.createContext()"
        ],
        "description": "Creates and exports React context"
    },
    "useState": {
        "prefix": "useState",
        "body": [
            "const [${1:state}, set${1/(.*)/${1:/capitalize}/}] = useState(${2:initialState})"
        ]
    },
    "useEffect": {
        "prefix": "useEffect",
        "body": [
            "useEffect(() => {",
            "\t${1:effect}",
            "\treturn () => {",
            "\t\t$2",
            "\t}",
            "}, [$3])",
            "$0"
        ]
    },
    "useContext": {
        "prefix": "useContext",
        "body": [
            "const ${1:context} = useContext(${2:contextValue})"
        ]
    },
    "useRef": {
        "prefix": "useRef",
        "body": [
            "const ${1:ref} = useRef(${2:initialValue})"
        ]
    }
}